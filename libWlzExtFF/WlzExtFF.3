'\" t
.\" ident MRC HGU $Id$
.\""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.\" Project:    Woolz
.\" Title:      WlzExtFF.3
.\" Date:       March 1999
.\" Author:     Bill Hill
.\" Copyright:	1999 Medical Research Council, UK.
.\"		All rights reserved.
.\" Address:	MRC Human Genetics Unit,
.\"		Western General Hospital,
.\"		Edinburgh, EH4 2XU, UK.
.\" Purpose:    Functions for reading and writting Woolz objects to
.\"		and from external data formats.
.\" $Revision$
.\" Maintenance:Log changes below, with most recent at top of list.
.\""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TH "WlzExtFF" 3 "MRC HGU Woolz" "Woolz Library (External Data Formats)"
.SH NAME
WlzExtFF \- Woolz external data format functions.
.SH SYNOPSIS
.LP
.B #include <Wlz.h>
.br
.B #include <WlzExtFF.h>
.LP
typedef enum
.br
{
.br
.in +4m
WLZEFF_FORMAT_NONE,
.br
WLZEFF_FORMAT_BMP,
.br
WLZEFF_FORMAT_DEN,
.br
WLZEFF_FORMAT_ICS,
.br
WLZEFF_FORMAT_PNM,
.br
WLZEFF_FORMAT_PIC,
.br
WLZEFF_FORMAT_SLC,
.br
WLZEFF_FORMAT_VFF,
.br
WLZEFF_FORMAT_VTK,
.br
WLZEFF_FORMAT_WLZ,
.br
WLZEFF_FORMAT_COUNT
.in -4m
.br
} WlzEffFormat;
.LP
.BI "WlzEffFormat WlzEffStringExtToFormat(const char *" extStr );
.LP
.BI "WlzEffFormat WlzEffStringToFormat(const char *" fmtStr );
.LP
.BI "const char *WlzEffStringFromFormat(WlzEffFormat " fFmt ,
.in +4m
.br
.BI "const char **" dstExtStr );
.in -4m
.LP
.BI "WlzObject *WlzEffReadObj(FILE *" fP ,
.in +4m
.br
.BI "const char *" "fName" ,
.BI "WlzEffFormat " fFmt ,
.br
.BI "WlzErrorNum *" dstErr );
.in -4m
.BI "WlzErrorNum WlzEffWriteObj(FILE *" fP ,
.in +4m
.br
.BI "const char *" "fName" ,
.BI "WlzObject *" obj ,
.br
.BI "WlzEffFormat " fFmt );
.in -4m
.SH ARGUMENTS
.TS
tab(^);
lI l.
dstErr^Destination pointer for Woolz error number, may be NULL.
dstExtStr^Destination pointer for extension string.
extStr^Given file extension string.
fFmt^Given file format enumerated type.
fName^File name or base for file names.
fP^File stream.
fmtStr^Given file format string.
obj^Given woolz object.
.TE
.SH MT-LEVEL
.LP
Unsafe
.SH DESCRIPTION
.LP
The utility functions \fBWlzEffStringExtToFormat\fR,
\fBWlzEffStringToFormat\fR and \fBWlzEffStringFromFormat\fR
allow conversion between the file format enumerated types and
text strings.
.SS WlzEffStringExtToFormat
Takes as a parameter a file extension string and returns the
corresponding file format enumerated type.
The return value
WLZEFF_FORMAT_NONE is used when there is no format corresponding 
to the given string.
.SS WlzEffStringToFormat
Takes as a parameter a file format string and returns the corresponding file
format enumerated type. 
The return value
WLZEFF_FORMAT_NONE is used when there is no format corresponding 
to the given string.
.SS WlzEffStringFromFormat
Given a file format enumerated type,
WlzEffStringFromFormat
returns a string which is suitable for displaying
(eg \'BioRad Confocal\')
and sets a destination pointer for the
formats file extension.
.SS WlzEffReadObj
Reads a woolz object from the the given file names(s)
or opened file stream, where the file format of the
given a parameter is used.
The BMP, ICS and PNM file formats require a file name, for
all other formats either the file name or a file stream
pointer may be given.
.SS WlzEffWriteObj
Writes a woolz object to the the given file names(s)
or opened file stream, where the file format of the
given a parameter is used.
The BMP, ICS and PNM file formats require a file name, for
all other formats either the file name or a file stream
pointer may be given.
.SH "FILE FORMATS"
.LP
.TS
tab(^);
cb s s s
cb s s s
lb lb lb lb
l l l l.
File Formats Supported.

String^Enumerated type^Ext(s)^Multiple files
Microsoft Bitmap^WLZEFF_FORMAT_BMP^bmpOne 2D bmp file
^^^for each plane
^^^plus a single
^^^control file for
^^^3D.
Stanford Density^WLZEFF_FORMAT_DEN^den^No.
ICS^WLZEFF_FORMAT_ICS^ics^Pair of ics and
^^ids^ids data files.
PNM^WLZEFF_FORMAT_PNM^pgm^One 2D pgm file
^^^for each plane
^^^plus a single
^^^control file for
^^^3D.
^^pnm^
BioRad Confocal^WLZEFF_FORMAT_PIC^pic^No.
SLC^WLZEFF_FORMAT_SLC^slc^No.
Sunvision VFF^WLZEFF_FORMAT_VFF^vff^No.
Visualization Toolkit^WLZEFF_FORMAT_VTK^vtk^No.
VTK^^^
Woolz^WLZEFF_FORMAT_WLZ^wlz^No.
.TE
.LP 
A control file is used to support 3D volumes using 2D data formats. This
is a plain ascii text file which specifies the volume's origin
and size, the voxel size and the 2D data files.
.LP 
The following example specifies how the eight listed pgm data files
are combined to form a 3D volume.
.LP
.ps -2
.cs R 24
.nf
ident:WLZSTACKCTR:1.0
# A comment
volume origin:10 30 50
# Volume starts at column 10, line 30, plane 50
volume size:120 120 8
# The volume has 120 columns, 150 lines and 8 planes
voxel size:1 1 1
files
       50 lob00000000.pgm
       51 lob00000001.pgm
       52 lob00000002.pgm
       53 lob00000003.pgm
       54 lob00000004.pgm
       55 lob00000005.pgm
       56 lob00000006.pgm
       57 lob00000007.pgm
.fi
.cs R
.ps +2
.LP
The first record identifies the file type and version,
if it is not correct the control file wil not be read.
.LP
The volume origin (default 0 0 0) and
voxel size (default 1.0 1.0 1.0) are optional but the
volume size \fBmust\fR be supplied.
Dimensions are given as <column> <line> <plane>.
Comments can be included using the '#' character.
.SH EXAMPLES
.LP
.ps -2
.cs R 24
.nf
/*
 * Simple example using WlzEffReadObj() and WlzEffWriteObj() to
 * convert Biorad '.pic' files into Sunvision '.vff' files.
 * The '.pic' file is read from the standard input and the '.vff'
 * file is written to the standard output.
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <Wlz.h>
#include <WlzExtFF.h>

int             main(char *argv[], int argc)
{
  WlzObject     *obj = NULL;
  WlzErrorNum   errNum = WLZ_ERR_NONE;

  if(((obj = WlzEffReadObj(stdin, NULL, WLZEFF_FORMAT_PIC,
                           &errNum)) == NULL) || (errNum != WLZ_ERR_NONE))
  {
    (void )fprintf(stderr, "%s: Failed to read input object.\\n", *argv);
    errNum = EOF_READ_ERROR;
  }
  else if(WlzEffWriteObj(stdout, NULL, obj, WLZEFF_FORMAT_VFF) != WLZ_ERR_NONE)
  {
    (void )fprintf(stderr, "%s: Failed to write output object.\\n", *argv);
    errNum = EOF_WRITE_ERROR;
  }
  if(obj)
  {
    WlzFreeObj(obj);
  }
  return(errNum);
}
.fi
.cs R
.ps +2
.SH SEE ALSO
WlzError(3)
.SH BUGS
Still to be found.
