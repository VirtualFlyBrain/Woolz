'\" te
.\" ident MRC HGU $Id$
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.\" Project:    Woolz
.\" Title:      WlzInsideDomain.3
.\" Date:       July 1999
.\" Author:     Bill Hill
.\" Copyright:	1999 Medical Research Council, UK.
.\"		All rights reserved.
.\" Address:	MRC Human Genetics Unit,
.\"		Western General Hospital,
.\"		Edinburgh, EH4 2XU, UK.
.\" Purpose:    Woolz function which determines whether a coordinate
.\"		lies within an object's domain.
.\" $Revision$
.\" Maintenance:Log changes below, with most recent at top of list.
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.nh
.TH "WlzInsideDomain" 3 "%G%" "MRC HGU Woolz" "Woolz Procedure Library"
.SH NAME
WlzInsideDomain \- Woolz function which determines whether a coordinate
lies within an object's domain.
.SH SYNOPSIS
.LP
.B #include <Wlz.h>
.LP
.BI "int WlzInsideDomain(WlzObject *" "obj" ,
.in +4m
.br
.BI "double " "plane" ,
.BI "double " "line" ,
.BI "double " "kol" ,
.br
.BI "WlzErrorNum " "dstErrNum" );
.in -4m
.SH ARGUMENTS
.TS
tab(^);
lI l.
obj^Woolz domain object with grey values.
plane^Plane (z) coordinate.
line^Line (y) coordinate.
kol^Column (x) coordinate.
dstErrNum^Destination pointer for error number.
.TE
.SH MT-LEVEL
.LP
Safe
.SH DESCRIPTION
.LP
.B WlzInsideDomain
determines whether the given coordinate
lies within the given object's domain.
It returns a non\-zero value if the coordinate lies inside the domain
or zero if it is outside the domain.
.SH EXAMPLES
.LP
.ps -2
.cs B 24
.cs R 24
.nf

/* Simple example which reads a Woolz 2D domain object from
 * the standard input and writes a pbm format image of the
 * domain to the standard output.
 * \s+2\fBThis is NOT an efficient way to do this!\s-2\fR
 * Look at WlzInitRasterScan for a more efficient solution.
 */
 
#include <stdio.h>
#include <stdlib.h>
#include <Wlz.h>
 
int             main(char *argv[], int argc)
{
  int           line,
                kol;
  WlzObject     *obj = NULL;
  WlzErrorNum   errNum = WLZ_ERR_NONE;
 
  if((obj = WlzAssignObject(WlzReadObj(stdin, &errNum), NULL)) == NULL)
  {
    (void )fprintf(stderr,
                   "%s: failed to read object.\\n",
                   argv[0]);
  }
  else if((obj->type != WLZ_2D_DOMAINOBJ) ||
          (obj->domain.core == NULL))
  {
    (void )fprintf(stderr,
                   "%s: Inappropriate object type.\\n",
                   argv[0]);
    errNum = INVALID_OBJECT_TYPE;
  }
  else
  {
    (void )printf("P1\\n%d %d\\n",
                  obj->domain.i->lastkl - obj->domain.i->kol1 + 1,
                  obj->domain.i->lastln - obj->domain.i->line1 + 1);
    for(line = obj->domain.i->lastln;
        (line >= obj->domain.i->line1) && (errNum == WLZ_ERR_NONE);
        --line)
    {
      for(kol = obj->domain.i->kol1; 
          (kol <= obj->domain.i->lastkl) && (errNum == WLZ_ERR_NONE);
          ++kol)
      {
        (void )printf("%d ",
                      WlzInsideDomain(obj, 0, line, kol,
                                      &errNum)? 1: 0);
      }
      (void )printf("\\n");
    }
    if(errNum != WLZ_ERR_NONE)
    {
      (void )fprintf(stderr,
                     "%s: WlzInsideDomain returned an error.\\n",
                     argv[0]);
    }
  }
  if(obj)
  {
    WlzFreeObj(obj);
  }
  return(errNum);
}
 

.fi
.cs R
.cs B
.ps +2
.SH SEE ALSO
WlzInitRasterScan(3),
WlzError(3)
.SH BUGS
Still to be found.
