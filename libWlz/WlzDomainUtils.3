'\" te
.\" ident MRC HGU $Id$
.\""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.\" Project:    Woolz
.\" Title:      WlzDomainUtils.3
.\" Date:       March 1999
.\" Author:     Richard Baldock, Bill Hill
.\" Copyright:	1999 Medical Research Council, UK.
.\"		All rights reserved.
.\" Address:	MRC Human Genetics Unit,
.\"		Western General Hospital,
.\"		Edinburgh, EH4 2XU, UK.
.\" Purpose:    Woolz utility functions for 2D and 3D domains.
.\" $Revision$
.\" Maintenance:Log changes below, with most recent at top of list.
.\""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.\" %W%\\t%G%
.TH WlzDomainUtils 3 "13th November 1996" "MRC HGU Woolz" "Woolz Procedure Library"
.SH NAME
WlzBitLnSetItv,
WlzDynItvLnFromBitLn,
WlzDynItvAdd,
WlzStandardIntervalDomain,
WlzStandardPlaneDomain,
WlzIntervalCount,
WlzLineArea 
\- utility procedures for 2D and 3D domains.
.SH SYNOPSIS
.LP
.B #include <Wlz.h>
.LP
.ps -2
.cs R 24
.nf
#define WLZ_BIT_SET(A,B) *((A)+((B)>>3))|=(1<<((B)&7))
#define WLZ_BIT_GET(A,B) *((A)+((B)>>3))&(1<<((B)&7))

typedef struct _WlzDynItvPool
{
  WlzInterval   *itvBlock;    /* Block of intervals allocated. */
  int           itvsInBlock;  /* Number of intervals to allocate
                               * in each block. */
  int           offset;       /* Offset from start of block to
                               * the next available interval. */
} WlzDynItvPool;

.fi
.cs R
.ps +2
.LP
.BI "void WlzBitLnSetItv(UBYTE *" "bitLnP" ,
.in +4m
.BI "int " "iLft" ,
.BI "int " "iRgt" ,
.BI "int " "size" );
.in -4m
.LP
.BI "WlzErrorNum WlzDynItvLnFromBitLn(WlzIntervalDomain *" "iDom" ,
.in +4m
.BI "UBYTE *" "bitLn" ,
.BI "int " "line" ,
.BI "int " "width" ,
.br
.BI "WlzDynItvPool *" "iPool" );
.in -4m
.LP
.BI "WlzErrorNum WlzDynItvAdd(WlzIntervalDomain *" "iDom" ,
.in +4m
.BI "WlzDynItvPool *" "iPool" ,
.BI "int " "line" ,
.BI "int " "iLft" , 
.br
.BI "int " "iLen" );
.in -4m
.LP
.BI "WlzErrorNum WlzStandardIntervalDomain(WlzIntervalDomain *" "iDom" );
.LP
.BI "WlzErrorNum WlzStandardPlaneDomain(WlzPlaneDomain *" "pdom" ,
.in +4m
.BI "WlzVoxelValues *" "voxtb" );
.in -4m
.LP
.BI "int WlzIntervalCount(WlzIntervalDomain *" "iDom" );
.LP
.BI "int WlzLineArea(WlzObject *" "obj" );
.SH ARGUMENTS
.TS
tab(^);
lI l.
bitLn^byte packed bitmap for line.
bitLnP^bit line pointer
iDom^intervaldomain pointer.
iLen^width of interval.
iLft^left coordinate of interval.
iPool^interval pool.
iRgt^right coordinate of interval.
line^line coordinate.
obj^object pointer.
pdom^planedomain pointer.
size^number of bits in bit line.
voxtb^matching voxel table to the planedomain.
width^width of the line, ie number of valid bits
^in bitmask.
.TE
.SH MT-LEVEL
.LP
Unsafe
.SH DESCRIPTION
.I WlzDynItvPool
is used to pass an interval pool between functions which
dynamicly build intervals.
Before building (each) interval domain using a
.I WlzDynItvPool
interval pool,
.I itvBlock
should be set to NULL and
.I itvsInBlock
should be set to some positive number, which
.B MUST
be greater than the maximum number of intervals in any line.
.LP
.I WlzBitLnSetItv
sets bits in the given byte packed bit line which are
within the given interval.
.LP
.I WlzDynItvLnFromBitLn
adds an interval line to a interval domain given:
an allocated interval domain, a byte packed bitmask
for the interval line and a pool of available intervals.
.LP
.I WlzDynItvAdd
adds an interval to a interval domain given:
an allocated interval domain, a pool of available
intervals, the line coordinate,
the intervals left most column
and the interval width.
.LP
.I WLZ_BIT_SET
and
.I WLZ_BIT_GET
are two macros that can be used to set and get the value of a bit in a byte
packed bit line.
.LP
.I WlzStandardIntervalDomain
and
.I WlzStandardPlaneDomain
routines
standardise the domains by minimising the bounding box,
stripping leading and trailing empty lines or domains and freeing any
associated valuetables. The structures are modified "in place". Both
procedure return WLZ_ERR_NONE on successful completion.
.LP
.I WlzStandardIntervalDomain,
standardises an interval domain possible errors: NULL_DOMAIN.
.LP
.I WlzStandardPlaneDomain,
standardises a plane domain and corresponding voxel-table, possible
errors: NULL_DOMAIN, BAD_PLANEDOMAIN.
.LP
.I WlzIntervalCount,
returns the number of intervals in an interval domain. If the domain is
rectangular then return the number of lines ie the equivalent number
of intervals. Returns -1 on error.
.LP
.I WlzLineArea,
calculates the "line-area" of an objects defined as the sum of the
line segments bounded by the left hand end of the first interval in a
line and the right hand end of the last interval in that line. This is
the number of grey-values that will be stored in a conventional
ragged-rectangular valuetable.
.SH EXAMPLES
.LP

.SH SEE ALSO
WlzError(3)
.SH BUGS

