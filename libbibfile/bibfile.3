'\" t
.\" ident MRC HGU $Id$
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.\" Project:    Mouse Atlas
.\" Title:      bibfile.3
.\" Date:       March 1999
.\" Author:     Bill Hill
.\" Copyright:	1999 Medical Research Council, UK.
.\"		All rights reserved.
.\" Address:	MRC Human Genetics Unit,
.\"		Western General Hospital,
.\"		Edinburgh, EH4 2XU, UK.
.\" Purpose:    Functions and data structures for HGU bibfile I/O.
.\" $Revision$
.\" Maintenance:Log changes below, with most recent at top of list.
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.nh 3
.TH bibfile 3 "6 Sep 1994"
.SH NAME
bibfile \- functions and data structures for HGU bibfile I/O
.SH SYNOPSIS
.LP
.B
#include <bibFile.h>
.LP
.BI "BibFileRecord *BibFileRecordMake(char *" "name" ,
.BI "char *" "id" ,
.BI "BibFileField *" "field" );
.LP
.BI "BibFileField *BibFileFieldMake(char *" "name" ,
.BI "char *" "value" ,
.BI "BibFileField *" "next" );
.LP
.BI "BibFileField *BibFileFieldMakeVa(char *" "name" ,
.BI "char *" "value" ", ...);"
.LP
.BI "BibFileField *BibFileFieldJoin(BibFileField *" "field0" ,
.BI "BibFileField *" "field1" ", ...);"
.LP
.BI "void BibFileRecordFree(BibFileRecord **" "record" );
.LP
.BI "void BibFileFieldFree(BibFileField **" "field" );
.LP
.BI "BibFileError BibFileRecordRead(BibFileRecord **" "record" ,
.BI "char **" eMsg,
.BI "FILE *" "fP" ),
.LP
.BI "void BibFileRecordWrite(FILE *" "fP" ,
.BI "char **" "eMsg" ,
.BI "BibFileRecord *" "record" );
.LP
.BI "void BibFileFieldRead(BibFileField **" "field" ,
.BI "char **" "eMsg" ,
.BI "int *" "endFlag" ,
.BI "FILE *" "fP" );
.LP
.BI "void BibFileFieldWrite(FILE *" "fP" ,
.BI "char **" "eMsg" ,
.BI "BibFileField *" "field" );
.LP
.BI "int BibFileFieldParseFmt(BibFileField *" "topField" ,
.BI "void *" "value" ,
.BI "char *" "fmt" ,
.BI "char *" "name" ", ...);"
.SH MT-LEVEL
.LP
Unsafe
.SH DESCRIPTION
.LP
A library of functions for performing data I/O using HGU bibfile syntax text
files and linked list data types.
.LP
Three data types are used extensively within the library:
.in +4m
.sp 1
.TS
tab(!);
l s
l r.
Values of the \fBBibFileError\fR type
 
\fBBIBFILE_ER_NONE\fR = 0!/* No error */
\fBBIBFILE_ER_MALLOC\fR!/* Memory allocation error */
\fBBIBFILE_ER_SYNTAX\fR!/* Syntax error */
\fBBIBFILE_ER_WRITE\fR!/* Unable to write data */
\fBBIBFILE_ER_READ\fR!/* Unable to read data */
\fBBIBFILE_ER_EOF\fR!/* End of file, cf EOF */
.TE
.in -4m

.in +4m
.sp 1
.TS
tab(!);
l s s
l l r.
Members of the \fBBibFileRecord\fR type
 
\fBchar\fR!\fB*\fIname;\fR!/* Record name string */
\fBchar\fR!\fB*\fIid;\fR!/* Record id string */
\fBBibFileField\fR!\fB*\fIfield;\fR!/* First field of record */
.TE
.in -4m

.in +4m
.sp 1
.TS
tab(!);
l s s
l l r.
Members of the \fBBibFileField\fR type
 
\fBchar\fR!\fB*\fIname;\fR!/* Field name */
\fBchar\fR!\fB*\fIvalue;\fR!/* Field value */
\fBBibFileField\fR!\fB*\fInext;\fR!/* Next field in linked list */
.TE
.in -4m
.sp 1
.LP
The functions within the library fall into three broad categories:
File I/O,
field parsing and
memory allocation.
Hopefully the categories into which the functions fall are obvious from their
names.
.LP
\fBBibFileRecordRead\fR reads a bibfile record from the given file stream.
Data structures are allocated as required and 
the given \fIrecord\fR pointer is set appropriately.
Should the read fail
then an error value is returned and \fB*\fIeMsg\fR is set to an
allocated error message string.
If \fIeMsg\fR is NULL then no error message string is allocated.
.LP
\fBBibFileRecordWrite\fR writes a bibfile record to the given file stream.
Should the write fail then 
an error value is returned and \fB*\fIeMsg\fR is set as above.
.LP
\fBBibFileFieldRead\fR reads a single bibfile field from the given file stream.
The field is allocated and the given \fIfield\fR pointer is set appropriately.
Should the read fail then
an error value is returned and \fB*\fIeMsg\fR is set as above.
.LP
\fBBibFileFieldWrite\fR writes a bibfile field to the given file stream.
Should the write fail then
an error value is returned and \fB*\fIeMsg\fR is set as above.
.LP
\fBBibFileFieldParseFmt\fR
takes as parameters a NULL terminated linked list of bibfile fields and a
NULL terminated varargs list of \fIvalue\fR, \fIfmt\fR (format), \fIname\fR
parameter triples 
it then parses the linked list of fields
for matching names.
When a name is matched 
the appropriate format strings (see scanf(3)) are used to convert the
field values.
It is the responsibility of calling functions to provide
adequate storage for the converted values.
\fBBibFileFieldParseFmt\fR returns the number of successful conversions.
.LP
\fBBibFileRecordMake\fR creates a \fBBibFileRecord\fR data type with copies
of the given \fIname\fR and \fIid\fR strings. The given field pointer is 
inserted into the record data type as the head of the linked list of fields.
.LP
\fBBibFileFieldMake\fR creates a \fBBibFileField\fR data type with copies
of the given \fIname\fR and \fIvalue\fR strings.
The given \fInext\fR field
is inserted into the linked list of fields below the new field. 
.LP
\fBBibFileFieldMakeVa\fR is a varargs function which is often more convenient
than \fBBibFileFieldMake\fR.
It takes a NULL terminated list of
field \fIname\fR, \fIvalue\fR pairs and creates a new linked list of fields,
in each of which the given strings are copied. The new field linked list is
always NULL terminated.
.LP
\fBBibFileFieldJoin\fR is a varargs function which joins terminating
links
of the given NULL terminated list of field linked lists.
.LP
\fBBibFileRecordFree\fR frees the given \fIrecord\fR and
it's linked list of fields.
The \fIrecord\fR pointer is then set to NULL,
note that this function is passed \fBBibFileRecord **\fR.
.LP
\fBBibFileFieldFree\fR frees the given linked list of fields.
The \fIfield\fR pointer is then set to NULL,
note that this function is passed \fBBibFileField **\fR.
.SH EXAMPLES
.LP
The following example reads a bibfile syntax text file from a named file
and prints it to the standard output.
Of course cat(1) would do this far more efficiently but it couldn't report
bibfile syntax errors.
.LP
.ps -2
.cs R 24
.nf
#include <stdio.h>
#include <bibFile.h>
 
int             main(int argc, char **argv)
{
  BibFileError  errFlag = BIBFILE_ER_NONE;
  BibFileRecord *record;
  char          *errMsg = NULL;
  FILE          *fP;
 
  if(argc != 2)
    (void )fprintf(stderr, "Usage: %s <file>\\n", *argv);
  else
  {
    if((fP = fopen(*(argv + 1), "r")) != NULL)
    {
      while((errFlag == BIBFILE_ER_NONE) &&
            ((errFlag = BibFileRecordRead(&record, &errMsg,
                                          fP)) == BIBFILE_ER_NONE))
      {
        errFlag = BibFileRecordWrite(stdout, &errMsg, record);
        BibFileRecordFree(&record);
      }
      (void )fclose(fP);
      if((errFlag != BIBFILE_ER_NONE) && (errFlag != BIBFILE_ER_EOF))
      {
        (void )fprintf(stderr, "%s: Failed to read/write", *argv);
        if(errMsg)
          (void )fprintf(stderr, ", %s.\\n", errMsg);
        else
          (void )fprintf(stderr, ".\\n");
      }
    }
  }
}
.fi
.cs R
.ps +2
.SH SEE ALSO
bibfile(5),
scanf(3),
stdarg(5).
.SH BUGS
The read functions rely on system V regular expression functions which
are not available on all operating systems (eg Solaris 1).
Other than that
I'm sure there must be some bugs
still lurking in the library but I don't know of any.
