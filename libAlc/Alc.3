'\" t
.\" ident MRC HGU  $Id$
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.\" Project:    Woolz
.\" Title:      Alc.3
.\" Date:       December 1999
.\" Author:     Bill Hill
.\" Copyright:  1999 Medical Research Council, UK.
.\"             All rights reserved.
.\" Address:    MRC Human Genetics Unit,
.\"             Western General Hospital,
.\"             Edinburgh, EH4 2XU, UK.
.\" Purpose:    Functions for dynamically allocating storage
.\" $Revision$
.\" Maintenance:Log changes below, with most recent at top of list.
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.nh 3
.TH "Alc" 3 "MRC HGU Woolz" "Memory Allocation Library"
.SH NAME
Alc \- functions for dynamically allocating storage.
.SH SYNOPSIS
.LP
.B
#include <Alc.h>
.LP
.BI "void *AlcCalloc(int" elemCount ,
.BI "int " "elemSize" );
.LP
.BI "void *AlcMalloc(int" byteCount );
.LP
.BI "void *AlcRealloc(void *" buffer ,
.BI "int " "byteCount" );
.LP
.BI "void AlcFree(void *" buffer );
.LP
.BI "char *AlcStrDup(const char *" src );
.LP
.BI "AlcErrno AlcChar1Calloc(char *" dest ,
.BI "int " "mElem" );
.LP
.BI "AlcErrno AlcUnchar1Calloc(unsigned char *" dest ,
.BI "int " "mElem" );
.LP
.BI "AlcErrno AlcShort1Calloc(short *" dest ,
.BI "int " "mElem" );
.LP
.BI "AlcErrno AlcInt1Calloc(int *" dest ,
.BI "int " "mElem" );
.LP
.BI "AlcErrno AlcFloat1Calloc(float **" dest ,
.BI "int " "mElem" );
.LP
.BI "AlcErrno AlcDouble1Calloc(double **" dest ,
.BI "int " "mElem" );
.LP
.BI "AlcErrno AlcChar1Malloc(char **" dest ,
.BI "int " "mElem" );
.LP
.BI "AlcErrno AlcUnchar1Malloc(unsigned char **" dest ,
.BI "int " "mElem" );
.LP
.BI "AlcErrno AlcShort1Malloc(short **" dest ,
.BI "int " "mElem" );
.LP
.BI "AlcErrno AlcInt1Malloc(int **" dest ,
.BI "int " "mElem" );
.LP
.BI "AlcErrno AlcFloat1Malloc(float **" dest ,
.BI "int " "mElem" );
.LP
.BI "AlcErrno AlcDouble1Malloc(double **" dest ,
.BI "int " "mElem" );
.LP
.BI "AlcErrno AlcChar2Calloc(char ***" dest ,
.BI "int " "mElem" ,
.BI "int " "nElem" );
.LP
.BI "AlcErrno AlcUnchar2Calloc(unsigned char ***" dest ,
.BI "int " "mElem" ,
.BI "int " "nElem" );
.LP
.BI "AlcErrno AlcShort2Calloc(short ***" dest ,
.BI "int " "mElem" ,
.BI "int " "nElem" );
.LP
.BI "AlcErrno AlcInt2Calloc(int ***" dest ,
.BI "int " "mElem" ,
.BI "int " "nElem" );
.LP
.BI "AlcErrno AlcFloat2Calloc(float ***" dest ,
.BI "int " "mElem" ,
.BI "int " "nElem" );
.LP
.BI "AlcErrno AlcDouble2Calloc(double ***" dest ,
.BI "int " "mElem" ,
.BI "int " "nElem" );
.LP
.BI "AlcErrno AlcChar2Malloc(char ***" dest ,
.BI "int " "mElem" ,
.BI "int " "nElem" );
.LP
.BI "AlcErrno AlcUnchar2Malloc(unsigned char ***" dest ,
.BI "int " "mElem" ,
.BI "int " "nElem" );
.LP
.BI "AlcErrno AlcShort2Malloc(short ***" dest ,
.BI "int " "mElem" ,
.BI "int " "nElem" );
.LP
.BI "AlcErrno AlcInt2Malloc(int ***" dest ,
.BI "int " "mElem" ,
.BI "int " "nElem" );
.LP
.BI "AlcErrno AlcFloat2Malloc(float ***" dest ,
.BI "int " "mElem" ,
.BI "int " "nElem" );
.LP
.BI "AlcErrno AlcDouble2Malloc(double ***" dest ,
.BI "int " "mElem" ,
.BI "int " "nElem" );
.LP
.BI "AlcErrno AlcChar3Calloc(char ****" dest ,
.BI "int " "mElem" ,
.BI "int " "nElem" ,
.BI "int " "oElem" );
.LP
.BI "AlcErrno AlcUnchar3Calloc(unsigned char ****" dest ,
.BI "int " "mElem" ,
.BI "int " "nElem" ,
.BI "int " "oElem" );
.LP
.BI "AlcErrno AlcShort3Calloc(short ****" dest ,
.BI "int " "mElem" ,
.BI "int " "nElem" ,
.BI "int " "oElem" );
.LP
.BI "AlcErrno AlcInt3Calloc(int ****" dest ,
.BI "int " "mElem" ,
.BI "int " "nElem" ,
.BI "int " "oElem" );
.LP
.BI "AlcErrno AlcFloat3Calloc(float ****" dest ,
.BI "int " "mElem" ,
.BI "int " "nElem" ,
.BI "int " "oElem" );
.LP
.BI "AlcErrno AlcDouble3Calloc(double ****" dest ,
.BI "int " "mElem" ,
.BI "int " "nElem" ,
.BI "int " "oElem" );
.LP
.BI "AlcErrno AlcChar3Malloc(char ****" dest ,
.BI "int " "mElem" ,
.BI "int " "nElem" ,
.BI "int " "oElem" );
.LP
.BI "AlcErrno AlcUnchar3Malloc(unsigned char ****" dest ,
.BI "int " "mElem" ,
.BI "int " "nElem" ,
.BI "int " "oElem" );
.LP
.BI "AlcErrno AlcShort3Malloc(short ****" dest ,
.BI "int " "mElem" ,
.BI "int " "nElem" ,
.BI "int " "oElem" );
.LP
.BI "AlcErrno AlcInt3Malloc(int ****" dest ,
.BI "int " "mElem" ,
.BI "int " "nElem" ,
.BI "int " "oElem" );
.LP
.BI "AlcErrno AlcFloat3Malloc(float ****" dest ,
.BI "int " "mElem" ,
.BI "int " "nElem" ,
.BI "int " "oElem" );
.LP
.BI "AlcErrno AlcDouble3Malloc(double ****" dest ,
.BI "int " "mElem" ,
.BI "int " "nElem" ,
.BI "int " "oElem" );
.LP
.BI "AlcErrno Alc2Free(void *" dump );
.LP
.BI "AlcErrno AlcChar2Free(char *" dump );
.LP
.BI "AlcErrno AlcUnchar2Free(unsigned char *" dump );
.LP
.BI "AlcErrno AlcShort2Free(short *" dump );
.LP
.BI "AlcErrno AlcFloat2Free(float *" dump );
.LP
.BI "AlcErrno AlcDouble2Free(double *" dump );
.LP
.BI "AlcErrno Alc3Free(void *" dump );
.LP
.BI "AlcErrno AlcChar3Free(char *" dump );
.LP
.BI "AlcErrno AlcUnchar3Free(unsigned char *" dump );
.LP
.BI "AlcErrno AlcShort3Free(short *" dump );
.LP
.BI "AlcErrno AlcFloat3Free(float *" dump );
.LP
.BI "AlcErrno AlcDouble3Free(double *" dump );
.SH MT-LEVEL
.LP
Unsafe
.SH DESCRIPTION
.LP
The library contains functions for dynamically allocating
one, two and three dimensional arrays of fundamental types:
char, unsigned char, short, int, float and double. 
These functions are provided for both
the allocation of arrays with elements initialized to zero
(\fBAlc\fI\s-2<TYPE><DIMENSION>\s+2\fBalloc\fR)
and uninitialized arrays
(\fBAlc\fI\s-2<TYPE><DIMENSION>\s+2\fBmalloc\fR),
cf ANSI functions malloc(3) and calloc(3).
.LP
One dimensional dynamically allocated arrays should be free'd using
AlcFree(3), higher dimensional arrays should be free'd using the
appropriate function for the array dimension and type,
for example 
an array allocated using AlcDouble2Calloc
should be free'd using AlcDouble2Free.
.LP
AlcStrDup(3) can be used in place of strdup(3) for string duplication
using AlcMalloc(3).
.LP
.B Error Handling.
Most functions within the library return an error code of type
\fBAlcErrno\fR:
.in +4m
.sp 1
.TS
tab(!);
l s
l r.
Values of the \fBAlcErrno\fR type
 
\fBALC_ER_NONE\fR = 0!/* No error */
\fBALC_ER_ALLOC\fR!/* Insufficient memory available */
\fBALC_ER_NULLPTR\fR!/* Null pointer supplied */
\fBALC_ER_NUMELEM\fR!/* Invalid number of elements */
.TE
.in -4m
.SH EXAMPLES
.LP
The following example takes the number of rows and columns from the command
line and then
allocates a two dimensional array of the appropriate size.
The elements are set to the value of the row times the column indices,
and printed to the standard output.
.LP
.ps -2
.cs R 24
.nf
#include <stdio.h>
#include <Alc.h>

int             main(int argc, char **argv)
{
  int           cols,
                rows,
                idx0,
                idx1;
  double        **data;
  AlcErrno      alcErr = ALC_ER_NONE;

  if((argc != 3) ||
     (sscanf(*(argv + 1), "%d", &rows) != 1) ||
     (sscanf(*(argv + 2), "%d", &cols) != 1))
  {
    (void )fprintf(stderr,
                   "Usage: %s <rows> <cols>\\n"
                   "Test 2D type allocation routines.\\n",
                   *argv);
  }
  else
  {
    alcErr = AlcDouble2Calloc(&data, cols, rows);
    if(alcErr == ALC_ER_NONE)
    {
      for(idx0 = 0; idx0 < cols; ++idx0)
        for(idx1 = 0; idx1 < rows; ++idx1)
          *(*(data + idx0) + idx1) = idx0 * idx1;
      for(idx0 = 0; idx0 < cols; ++idx0)
      {
        for(idx1 = 0; idx1 < rows; ++idx1)
          (void )printf("%g ", *(*(data + idx0) + idx1));
        (void )printf("\\n");
      }
      alcErr = AlcDouble2Free(data);
    }
  }
  if(alcErr != ALC_ER_NONE)
  {
    (void )fprintf(stderr,
                   "%s: Error (code %d)\\n",
                   (int )alcErr);
  }
  return(alcErr);
}

.fi
.cs R
.ps +2
.SH SEE ALSO
calloc(3),
free(3),
malloc(3),
realloc(3),
strdup(3)
.SH BUGS
Still to be found!
